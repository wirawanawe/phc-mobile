
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>

namespace facebook::react {

enum class BlurViewBlurType { Dark, Light, Xlight, Prominent, Regular, ExtraDark, ChromeMaterial, Material, ThickMaterial, ThinMaterial, UltraThinMaterial, ChromeMaterialDark, MaterialDark, ThickMaterialDark, ThinMaterialDark, UltraThinMaterialDark, ChromeMaterialLight, MaterialLight, ThickMaterialLight, ThinMaterialLight, UltraThinMaterialLight };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, BlurViewBlurType &result) {
  auto string = (std::string)value;
  if (string == "dark") { result = BlurViewBlurType::Dark; return; }
  if (string == "light") { result = BlurViewBlurType::Light; return; }
  if (string == "xlight") { result = BlurViewBlurType::Xlight; return; }
  if (string == "prominent") { result = BlurViewBlurType::Prominent; return; }
  if (string == "regular") { result = BlurViewBlurType::Regular; return; }
  if (string == "extraDark") { result = BlurViewBlurType::ExtraDark; return; }
  if (string == "chromeMaterial") { result = BlurViewBlurType::ChromeMaterial; return; }
  if (string == "material") { result = BlurViewBlurType::Material; return; }
  if (string == "thickMaterial") { result = BlurViewBlurType::ThickMaterial; return; }
  if (string == "thinMaterial") { result = BlurViewBlurType::ThinMaterial; return; }
  if (string == "ultraThinMaterial") { result = BlurViewBlurType::UltraThinMaterial; return; }
  if (string == "chromeMaterialDark") { result = BlurViewBlurType::ChromeMaterialDark; return; }
  if (string == "materialDark") { result = BlurViewBlurType::MaterialDark; return; }
  if (string == "thickMaterialDark") { result = BlurViewBlurType::ThickMaterialDark; return; }
  if (string == "thinMaterialDark") { result = BlurViewBlurType::ThinMaterialDark; return; }
  if (string == "ultraThinMaterialDark") { result = BlurViewBlurType::UltraThinMaterialDark; return; }
  if (string == "chromeMaterialLight") { result = BlurViewBlurType::ChromeMaterialLight; return; }
  if (string == "materialLight") { result = BlurViewBlurType::MaterialLight; return; }
  if (string == "thickMaterialLight") { result = BlurViewBlurType::ThickMaterialLight; return; }
  if (string == "thinMaterialLight") { result = BlurViewBlurType::ThinMaterialLight; return; }
  if (string == "ultraThinMaterialLight") { result = BlurViewBlurType::UltraThinMaterialLight; return; }
  abort();
}

static inline std::string toString(const BlurViewBlurType &value) {
  switch (value) {
    case BlurViewBlurType::Dark: return "dark";
    case BlurViewBlurType::Light: return "light";
    case BlurViewBlurType::Xlight: return "xlight";
    case BlurViewBlurType::Prominent: return "prominent";
    case BlurViewBlurType::Regular: return "regular";
    case BlurViewBlurType::ExtraDark: return "extraDark";
    case BlurViewBlurType::ChromeMaterial: return "chromeMaterial";
    case BlurViewBlurType::Material: return "material";
    case BlurViewBlurType::ThickMaterial: return "thickMaterial";
    case BlurViewBlurType::ThinMaterial: return "thinMaterial";
    case BlurViewBlurType::UltraThinMaterial: return "ultraThinMaterial";
    case BlurViewBlurType::ChromeMaterialDark: return "chromeMaterialDark";
    case BlurViewBlurType::MaterialDark: return "materialDark";
    case BlurViewBlurType::ThickMaterialDark: return "thickMaterialDark";
    case BlurViewBlurType::ThinMaterialDark: return "thinMaterialDark";
    case BlurViewBlurType::UltraThinMaterialDark: return "ultraThinMaterialDark";
    case BlurViewBlurType::ChromeMaterialLight: return "chromeMaterialLight";
    case BlurViewBlurType::MaterialLight: return "materialLight";
    case BlurViewBlurType::ThickMaterialLight: return "thickMaterialLight";
    case BlurViewBlurType::ThinMaterialLight: return "thinMaterialLight";
    case BlurViewBlurType::UltraThinMaterialLight: return "ultraThinMaterialLight";
  }
}

class BlurViewProps final : public ViewProps {
 public:
  BlurViewProps() = default;
  BlurViewProps(const PropsParserContext& context, const BlurViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  BlurViewBlurType blurType{BlurViewBlurType::Dark};
  int blurAmount{10};
  SharedColor reducedTransparencyFallbackColor{};
};

enum class AndroidBlurViewBlurType { Dark, Light, Xlight };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, AndroidBlurViewBlurType &result) {
  auto string = (std::string)value;
  if (string == "dark") { result = AndroidBlurViewBlurType::Dark; return; }
  if (string == "light") { result = AndroidBlurViewBlurType::Light; return; }
  if (string == "xlight") { result = AndroidBlurViewBlurType::Xlight; return; }
  abort();
}

static inline std::string toString(const AndroidBlurViewBlurType &value) {
  switch (value) {
    case AndroidBlurViewBlurType::Dark: return "dark";
    case AndroidBlurViewBlurType::Light: return "light";
    case AndroidBlurViewBlurType::Xlight: return "xlight";
  }
}

class AndroidBlurViewProps final : public ViewProps {
 public:
  AndroidBlurViewProps() = default;
  AndroidBlurViewProps(const PropsParserContext& context, const AndroidBlurViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int blurAmount{10};
  AndroidBlurViewBlurType blurType{AndroidBlurViewBlurType::Dark};
  int blurRadius{0};
  int downsampleFactor{0};
  SharedColor overlayColor{};
  bool enabled{false};
  bool autoUpdate{false};
};

enum class VibrancyViewBlurType { Dark, Light, Xlight, Prominent, Regular, ExtraDark, ChromeMaterial, Material, ThickMaterial, ThinMaterial, UltraThinMaterial, ChromeMaterialDark, MaterialDark, ThickMaterialDark, ThinMaterialDark, UltraThinMaterialDark, ChromeMaterialLight, MaterialLight, ThickMaterialLight, ThinMaterialLight, UltraThinMaterialLight };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, VibrancyViewBlurType &result) {
  auto string = (std::string)value;
  if (string == "dark") { result = VibrancyViewBlurType::Dark; return; }
  if (string == "light") { result = VibrancyViewBlurType::Light; return; }
  if (string == "xlight") { result = VibrancyViewBlurType::Xlight; return; }
  if (string == "prominent") { result = VibrancyViewBlurType::Prominent; return; }
  if (string == "regular") { result = VibrancyViewBlurType::Regular; return; }
  if (string == "extraDark") { result = VibrancyViewBlurType::ExtraDark; return; }
  if (string == "chromeMaterial") { result = VibrancyViewBlurType::ChromeMaterial; return; }
  if (string == "material") { result = VibrancyViewBlurType::Material; return; }
  if (string == "thickMaterial") { result = VibrancyViewBlurType::ThickMaterial; return; }
  if (string == "thinMaterial") { result = VibrancyViewBlurType::ThinMaterial; return; }
  if (string == "ultraThinMaterial") { result = VibrancyViewBlurType::UltraThinMaterial; return; }
  if (string == "chromeMaterialDark") { result = VibrancyViewBlurType::ChromeMaterialDark; return; }
  if (string == "materialDark") { result = VibrancyViewBlurType::MaterialDark; return; }
  if (string == "thickMaterialDark") { result = VibrancyViewBlurType::ThickMaterialDark; return; }
  if (string == "thinMaterialDark") { result = VibrancyViewBlurType::ThinMaterialDark; return; }
  if (string == "ultraThinMaterialDark") { result = VibrancyViewBlurType::UltraThinMaterialDark; return; }
  if (string == "chromeMaterialLight") { result = VibrancyViewBlurType::ChromeMaterialLight; return; }
  if (string == "materialLight") { result = VibrancyViewBlurType::MaterialLight; return; }
  if (string == "thickMaterialLight") { result = VibrancyViewBlurType::ThickMaterialLight; return; }
  if (string == "thinMaterialLight") { result = VibrancyViewBlurType::ThinMaterialLight; return; }
  if (string == "ultraThinMaterialLight") { result = VibrancyViewBlurType::UltraThinMaterialLight; return; }
  abort();
}

static inline std::string toString(const VibrancyViewBlurType &value) {
  switch (value) {
    case VibrancyViewBlurType::Dark: return "dark";
    case VibrancyViewBlurType::Light: return "light";
    case VibrancyViewBlurType::Xlight: return "xlight";
    case VibrancyViewBlurType::Prominent: return "prominent";
    case VibrancyViewBlurType::Regular: return "regular";
    case VibrancyViewBlurType::ExtraDark: return "extraDark";
    case VibrancyViewBlurType::ChromeMaterial: return "chromeMaterial";
    case VibrancyViewBlurType::Material: return "material";
    case VibrancyViewBlurType::ThickMaterial: return "thickMaterial";
    case VibrancyViewBlurType::ThinMaterial: return "thinMaterial";
    case VibrancyViewBlurType::UltraThinMaterial: return "ultraThinMaterial";
    case VibrancyViewBlurType::ChromeMaterialDark: return "chromeMaterialDark";
    case VibrancyViewBlurType::MaterialDark: return "materialDark";
    case VibrancyViewBlurType::ThickMaterialDark: return "thickMaterialDark";
    case VibrancyViewBlurType::ThinMaterialDark: return "thinMaterialDark";
    case VibrancyViewBlurType::UltraThinMaterialDark: return "ultraThinMaterialDark";
    case VibrancyViewBlurType::ChromeMaterialLight: return "chromeMaterialLight";
    case VibrancyViewBlurType::MaterialLight: return "materialLight";
    case VibrancyViewBlurType::ThickMaterialLight: return "thickMaterialLight";
    case VibrancyViewBlurType::ThinMaterialLight: return "thinMaterialLight";
    case VibrancyViewBlurType::UltraThinMaterialLight: return "ultraThinMaterialLight";
  }
}

class VibrancyViewProps final : public ViewProps {
 public:
  VibrancyViewProps() = default;
  VibrancyViewProps(const PropsParserContext& context, const VibrancyViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  VibrancyViewBlurType blurType{VibrancyViewBlurType::Dark};
  int blurAmount{10};
  SharedColor reducedTransparencyFallbackColor{};
};

} // namespace facebook::react
